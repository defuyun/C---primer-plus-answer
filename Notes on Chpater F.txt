abort() sends message, sends fail to shell, does not flush stream
exit() does not send message but flush stream

throw works like return except that is backs up the code until it finds the keyword try

throw returns to the first function call with a try
e.g.

fun1{
  try{
    fun2();
  }catch(const char *){
  
  }
}

fun2(){
  fun3();
}

fun3(){
  throw "string"
}

returns to fun1() deleting the memory ocupied by fun2() on it's way

when throing an exception, the compiler always create a temporary copy of the object;
e.g.

fun1(){
  try{  
    fun3();
  }catch(int & i){
    cout << i;
  }
}

fun3(){
  int i;
  throw i;
}

throw would create a copy of i therefore fun1() can use it by reference

to catch any error use

try{

}catch(...){

}

... catches everything
dynamic cast can be used to convert objects from base to derive class

c++ has 3 components supporting RTTI:
~ dynamic_cast operatpr generates a pointer to a derived type from a pointer of a base class
~ typeid returns a value identfying the exact type
~ type_info class hold info about a type

the typeid returns a reference to a type_info object, the type_info overloads ==  and != so they can be used 
to compare types.
e.g.

typeid(a tpye name) == typeid(*var)
if failed to convert, var will be null and type_info throws bad_typeid exception

typeid(* var).name() returns a string containing the name of a class

const_cast can only alter the value if the target itself is not declared as const
e.g.

demo{
  int a = 1;
  const int b = 1;
  fun(a);
  fun(b);
}

fun(const int a){
  int * b = const_cast<int *>(&a);
  b++;
}

the const int b does not change

static_cast only works for base-derive or derive-base;
