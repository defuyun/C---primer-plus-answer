内联函数 inline 调用时将函数代码拷贝进源函数 省去了调用的步骤

引用是制造变量的别名,而变量本身代表着一个内存块和里面的内容

e.g int a = 5;
a有个地址 这个地址里存着5

int &b = a;
则b跟a有一样的地址 里面都存着5

&b 跟 *b本质上的区别是&b代表的就是这个变量 *b则指向这个变量的地址
*b本身还有一个地址 而这个地址里存放着a的地址

如果你改变了&b的地址 则a的地址也会改变 但是你如果改变了*b地址 a的地址并不会变

传引用
int &a(int &x,int &y){
  int temp = x+y;
  return temp;
}

上面的程序会segfault 因为当你返回引用时 你返回的是temp本身
传统返回(int a(int &x,int &y))时 temp的值会被拷贝在一个地址
调用a的函数则会去这个地址提取这个数,但是当返回引用时 收取temp
的那个变量将会变成temp的别名 跟他共用一个地址

//如果省略参数n,则它的值将为1;否则,传递的值将覆盖1
char *left(const char *str,int n = 1)



