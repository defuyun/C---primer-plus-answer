内联函数 inline 调用时将函数代码拷贝进源函数 省去了调用的步骤

引用是制造变量的别名,而变量本身代表着一个内存块和里面的内容

e.g int a = 5;
a有个地址 这个地址里存着5

int &b = a;
则b跟a有一样的地址 里面都存着5

&b 跟 *b本质上的区别是&b代表的就是这个变量 *b则指向这个变量的地址
*b本身还有一个地址 而这个地址里存放着a的地址

如果你改变了&b的地址 则a的地址也会改变 但是你如果改变了*b地址 a的地址并不会变

传引用
int &a(int &x,int &y){
  int temp = x+y;
  return temp;
}

上面的程序会segfault 因为当你返回引用时 你返回的是temp本身
传统返回(int a(int &x,int &y))时 temp的值会被拷贝在一个地址
调用a的函数则会去这个地址提取这个数,但是当返回引用时 收取temp
的那个变量将会变成temp的别名 跟他共用一个地址

//如果省略参数n,则它的值将为1;否则,传递的值将覆盖1
char *left(const char *str,int n = 1)

编译器在选择原型时,非模版版本优先于显示具体化和模版版本
prototype > explicit specialization > template

//non template function prototype
void swap(int &a, int &b);

//template
template<typename T>
void swap(T &a, T &b);

//explicit specialization
template<>
void swap<int>(int &,int &);

代码中包含函数模版并不会生成函数定义，只是一个用于生成函数定义的方案
编译器使用模版为特定类型生成函数定义时，得到的模版实例(instantiation)

函数调用swap时 编译器生成swap的实例(instantiation),这个实例使用int类型
,模版并非函数定义,但使用int的模版实例是函数定义。 这种实例化的方式被称为隐式实例化
(implicit instantiation),因为编译器之所以直到需要进行定义,是由于程序调用swap
函数时提供了int参数

显示实例化(explicit instantiation)意味着直接命令编译器创建特定的实例,如：
             swap<int>(int &,int &);
             swap(int &,int &);
这些声明的意思是： 不要使用swap模版生成函数定义,而应使用专门为int类型显示地定义的函数
包含<>的显示具体化,实例化没有

the decltype() function can be used to determin what type a variable should be(when using template)

e.g.
template <typename t1,typename t2>
?type? add(t1 a,t2 b)

for this function we can not be certain what the return type would be(int + double = double, int + short = int etc)
so we need to somehow determine the return value.

so we can use
template <typename t1,typename t2>
auto add(t1 a,t2 b)->decltype(a+b);
