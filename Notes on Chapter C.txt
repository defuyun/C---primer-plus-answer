class stringBad{
  priivate:
    char *str;
    int len;
    static int num_strings;
}

a static string inside a class has the following property;
the program only creates on copy of a static class variable
regardless of the number of objects created.

the static member is shared by all objects;

you cannot initialize the num_strings in the class
definition so

static int num_strings = 0 X

because declaration doesn't create memory and assigning a 
number needs to create memory to store the number;

stringBad b = "xxxxx";
stringBad a = b;

the 2nd line creates uses copy constructor which the compliler automatically
creates. however this still calls the regular destructor

c++ automatically creates the following member functions:
~ a default constructor
~ a default destructor
~ a copy constructor
~ an assingment operator (=)
~ an address operator

copy constructor:
prototype:
stringBad &stringBad(const stringBad &);

//motto is a stringBad
stringBad metoo = motto;
stringBad also = StringBad(motto);

depending on the implementation, these 2 may use a copy constructot to create metoo
and also. a compluler uses a copy constructor whenever a program generates copies
of an object. in particular, its used when a function passes an obkect by value 
or when a function returns an object.

delete []p;
can only delete pointers initialized by new[] or NULL pointer
it cannot delete pointers initialized by new;

use delete p for pointer initialized by new;

static member funtcion:
~ static member function doens;t have to be invoked by an object;
~ it does not get a this pointer
~ it could be invoked liked | int count = string::howmany() // string is the class, howmany is a stativ member funciton

conversion:
a constructor with a single argument serves as a conversion function
string name;
char temp[40];
cin.getline(temp,40);
name = temp;
the line name = temp; calls the constructor string(const char *)

old versions of cin.get does not set falsebit upon reading an empty line.
so cin.get(char *,int) if reads a '\0' string, does not set failbit.

returning a const object:
const &string max(const string &v1,const string &v2){
  return v2;
}

returning an const reference is more efficient than returning a copy:
to return a copy, the copt constructor is called which takes space.
because v1 and v2 are both consts therefore the return value must also
be const

